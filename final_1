# Импортируйте необходимые модули
import datetime as dt

FORMAT = '%H:%M:%S'  # Запишите формат полученного времени.
WEIGHT = 75  # Вес.
HEIGHT = 175  # Рост.
K_1 = 0.035  # Коэффициент для подсчета калорий.
K_2 = 0.029  # Коэффициент для подсчета калорий.
STEP_M = 0.65  # Длина шага в метрах.

storage_data = {}  # Словарь для хранения полученных данных.


def check_correct_data(data):
    """Проверка корректности полученного пакета."""
   
    if len(data) != 2 or None in data:
        return False
    else:
        return True


def check_correct_time(time):
    """Проверка корректности параметра времени."""
    if storage_data is not None:
        for time_check in storage_data.keys():
            if dt.datetime.strptime(time_check, FORMAT).time() >= time:
                return False
    return True

def get_step_day(steps):
    """Получить количество пройденных шагов за этот день."""
    return sum(storage_data.values()) + steps


def get_distance(day_steps):
    """Получить дистанцию пройденного пути в км."""
    return day_steps * STEP_M / 1000


def get_spent_calories(dist, current_time):
    """Получить значения потраченных калорий."""
    hour = current_time.hour + current_time.minute / 60
    minutes = current_time.hour * 60 + current_time.minute
    mean_speed = dist / hour

    spent_calories = (0.035 * WEIGHT + (mean_speed**2 / HEIGHT) * 0.029 * WEIGHT) * minutes
    return spent_calories


def get_achievement(dist):
    """Получить поздравления за пройденную дистанцию."""
    if dist >= 6.5:
        achievement = 'Отличный результат! Цель достигнута.'
    elif dist >= 3.9:
        achievement = 'Неплохо! День был продуктивным.'
    elif dist >= 2:
        achievement = 'Маловато, но завтра наверстаем!'
    else:
        achievement = 'Лежать тоже полезно. Главное — участие, а не победа!'
    return achievement


# Место для функции show_message.
def show_message(current_time, day_steps, dist, spent_calories, achievement):
     print(f"""
Время: {current_time}.
Количество шагов за сегодня: {day_steps}.
Дистанция составила {dist:.2f} км.
Вы сожгли {spent_calories:.2f} ккал.
{achievement}
""")


def accept_package(data):
    """Обработать пакет данных."""
    if check_correct_data(data) is False:
        return "Некорректный пакет"

    time, steps = data

    pack_time: dt.time = dt.datetime.strptime(time, FORMAT).time()
    if check_correct_time(pack_time) is False:
        return "Некорректное значение времени"

    day_steps = get_step_day(steps)  # Запишите результат подсчёта пройденных шагов.
    dist = get_distance(steps) + get_distance(sum(storage_data.values())) # Запишите результат расчёта пройденной дистанции.
    spent_calories = get_spent_calories(dist, pack_time) # Запишите результат расчёта сожжённых калорий.
    achievement = get_achievement(dist) # Запишите выбранное мотивирующее сообщение.

    show_message(pack_time, day_steps, dist, spent_calories, achievement) # Вызовите функцию show_message().
    #storage_data.update({data})
    storage_data[time] = steps  # Добавьте новый элемент в словарь storage_data.

    return storage_data # Верните словарь storage_data.


# Данные для самопроверки.Не удаляйте их.
package_0 = ('2:00:01', 505)
package_1 = (None, 3211)
package_2 = ('9:36:02', 15000)
package_3 = ('9:36:02', 9000)
package_4 = ('8:01:02', 7600)

print(accept_package(package_0))
print(accept_package(package_1))
print(accept_package(package_2))
print(accept_package(package_3))
print(accept_package(package_4))
